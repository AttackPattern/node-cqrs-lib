{
    "parser": "babel-eslint",

    "env": {
        "browser": true, // browser global variables.
        "node": true, // Node.js global variables and Node.js-specific rules.
        "worker": true, // web workers global variables.
        "amd": false, // defines require() and define() as global variables as per the amd spec.
        "mocha": true, // adds all of the Mocha testing global variables.
        "jasmine": false, // adds all of the Jasmine testing global variables for version 1.3 and 2.0.
        "phantomjs": false, // phantomjs global variables.
        "jquery": true, // jquery global variables.
        "prototypejs": false, // prototypejs global variables.
        "shelljs": false, // shelljs global variables.
        "meteor": false, // meteor global variables.
        "es6": true // enable all ECMAScript 6 features except for modules.
    },

    "ecmaFeatures": {
        "arrowFunctions": true, // enable arrow functions
        "binaryLiterals": true, // enable binary literals
        "blockBindings": true, // enable let and const (aka block bindings)
        "classes": true, // enable classes
        "defaultParams": true, // enable default function parameters
        "destructuring": true, // enable destructuring
        "forOf": true, // enable for-of loops
        "generators": true, // enable generators
        "module": true,
        "modules": true, // enable modules and global strict mode
        "objectLiteralComputedProperties": true, // enable computed object literal property names
        "objectLiteralDuplicateProperties": false, // enable duplicate object literal properties in strict mode
        "objectLiteralShorthandMethods": true, // enable object literal shorthand methods
        "objectLiteralShorthandProperties": true, // enable object literal shorthand properties
        "octalLiterals": true, // enable octal literals
        "regexUFlag": true, // enable the regular expression u flag
        "regexYFlag": true, // enable the regular expression y flag
        "restParams": true, // enable the rest parameters
        "spread": true, // enable the spread operator
        "superInFunctions": true, // enable super references inside of functions
        "templateStrings": true, // enable template strings
        "unicodeCodePointEscapes": true, // enable code point escapes
        "globalReturn": true, // allow return statements in the global scope
        "jsx": false // enable JSX
    },

    "rules": {
        ////////// Possible Errors //////////

        "comma-dangle": 2, // disallow trailing commas in object literals
        "no-cond-assign": 0, // disallow assignment in conditional expressions
        "no-console": 0, // disallow use of console (off by default in the node environment)
        "no-constant-condition": 2, // disallow use of constant expressions in conditions
        "no-control-regex": 2, // disallow control characters in regular expressions
        "no-debugger": 1, // disallow use of debugger
        "no-dupe-args": 2, // disallow duplicate arguments in functions
        "no-dupe-keys": 2, // disallow duplicate keys when creating object literals
        "no-empty-character-class": 0, // disallow the use of empty character classes in regular expressions
        "no-empty": 2, // disallow empty statements
        "no-ex-assign": 2, // disallow assigning to the exception in a catch block
        "no-extra-boolean-cast": 2, // disallow double-negation boolean casts in a boolean context
        "no-extra-parens": 1, // disallow unnecessary parentheses (off by default)
        "no-extra-semi": 2, // disallow unnecessary semicolons
        "no-func-assign": 2, // disallow overwriting functions written as function declarations
        "no-inner-declarations": 2, // disallow function or variable declarations in nested blocks
        "no-invalid-regexp": 2, // disallow invalid regular expression strings in the RegExp constructor
        "no-irregular-whitespace": 2, // disallow irregular whitespace outside of strings and comments
        "no-negated-in-lhs": 2, // disallow negation of the left operand of an in expression
        "no-obj-calls": 2, // disallow the use of object properties of the global object (Math and JSON) as functions
        "no-regex-spaces": 2, // disallow multiple spaces in a regular expression literal
        "no-sparse-arrays": 2, // disallow sparse arrays
        "no-unreachable": 2, // disallow unreachable statements after a return, throw, continue, or break statement
        "use-isnan": 2, // disallow comparisons with the value NaN
        "valid-jsdoc": 0, // Ensure JSDoc comments are valid (off by default)
        "valid-typeof": 2, // Ensure that the results of typeof are compared against a valid string


        ////////// Best Practices //////////

        "accessor-pairs": 0, // enforces getter/setter pairs in objects (off by default)
        "block-scoped-var": 0, // treat var statements as if they were block scoped (off by default)
        "complexity": [1, 5], // specify the maximum cyclomatic complexity allowed in a program (off by default)
        "consistent-return": 1, // require return statements to either always or never specify values
        "curly": 0, // specify curly brace conventions for all control statements
        "default-case": 1, // require default case in switch statements (off by default)
        "dot-notation": [2, {
            "allowKeywords": true
        }], // encourages use of dot notation whenever possible
        "dot-location": [2, "property"], // enforces consistent newlines before or after dots (off by default)
        "eqeqeq": [1, "smart"], // require the use of === and !==
        "guard-for-in": 2, // make sure for-in loops have an if statement (off by default)
        "no-alert": 1, // disallow the use of alert, confirm, and prompt
        "no-caller": 2, // disallow use of arguments.caller or arguments.callee
        "no-div-regex": 2, // disallow division operators explicitly at beginning of regular expression (off by default)
        "no-else-return": 2, // disallow else after a return in an if (off by default)
        "no-eq-null": 0, // disallow comparisons to null without a type-checking operator (off by default)
        "no-eval": 2, // disallow use of eval()
        "no-extend-native": 2, // disallow adding to native types
        "no-extra-bind": 2, // disallow unnecessary function binding
        "no-fallthrough": 2, // disallow fallthrough of case statements
        "no-floating-decimal": 0, // disallow the use of leading or trailing decimal points in numeric literals (off by default)
        "no-implied-eval": 2, // disallow use of eval()-like methods
        "no-iterator": 2, // disallow usage of __iterator__ property
        "no-labels": 2, // disallow use of labeled statements
        "no-lone-blocks": 2, // disallow unnecessary nested blocks
        "no-loop-func": 2, // disallow creation of functions within loops
        "no-multi-spaces": 2, // disallow use of multiple spaces
        "no-multi-str": 0, // disallow use of multiline strings
        "no-native-reassign": 2, // disallow reassignments of native objects
        "no-new": 2, // disallow use of new operator when not part of the assignment or comparison
        "no-new-func": 2, // disallow use of new operator for Function object
        "no-new-wrappers": 2, // disallows creating new instances of String, Number, and Boolean
        "no-octal": 2, // disallow use of octal literals
        "no-octal-escape": 2, // disallow use of octal escape sequences in string literals, such as var foo = "Copyright \251";
        "no-param-reassign": 0, // disallow reassignment of function parameters (off by default)
        "no-process-env": 0, // disallow use of process.env (off by default)
        "no-proto": 2, // disallow usage of __proto__ property
        "no-redeclare": 2, // disallow declaring the same variable more then once
        "no-return-assign": 0, // disallow use of assignment in return statement
        "no-script-url": 2, // disallow use of javascript urls.
        "no-self-compare": 0, // disallow comparisons where both sides are exactly the same (off by default)
        "no-sequences": 2, // disallow use of comma operator
        "no-throw-literal": 2, // restrict what can be thrown as an exception (off by default)
        "no-unused-expressions": 0, // disallow usage of expressions in statement position
        "no-void": 0, // disallow use of void operator (off by default)
        "no-warning-comments": 1, // disallow usage of configurable warning terms in comments, e.g. TODO or FIXME (off by default)
        "no-with": 2, // disallow use of the with statement
        "radix": 0, // require use of the second argument for parseInt() (off by default)
        "vars-on-top": 2, // requires to declare all vars on top of their containing scope (off by default)
        "wrap-iife": [2, "inside"], // require immediate function invocation to be wrapped in parentheses (off by default)
        "yoda": [2, "never"], // require or disallow Yoda conditions


        ////////// Strict Mode //////////

        "strict": 2, // controls location of Use Strict Directives


        ////////// Variables //////////

        "no-catch-shadow": 0, // disallow the catch clause parameter name being the same as a variable in the outer scope (off by default in the node environment)
        "no-delete-var": 2, // disallow deletion of variables
        "no-label-var": 2, // disallow labels that share a name with a variable
        "no-shadow": 1, // disallow declaration of variables already declared in the outer scope
        "no-shadow-restricted-names": 2, // disallow shadowing of names such as arguments
        "no-undef": 2, // disallow use of undeclared variables unless mentioned in a /*global */ block
        "no-undef-init": 2, // disallow use of undefined when initializing variables
        "no-undefined": 0, // disallow use of undefined variable (off by default)
        "no-unused-vars": 1, // disallow declaration of variables that are not used in the code
        "no-use-before-define": 0, // disallow use of variables before they are defined


        ////////// Node.js //////////

        "handle-callback-err": 2, // enforces error handling in callbacks (off by default) (on by default in the node environment)
        "no-mixed-requires": 2, // disallow mixing regular variable and require declarations (off by default) (on by default in the node environment)
        "no-new-require": 2, // disallow use of new operator with the require function (off by default) (on by default in the node environment)
        "no-path-concat": 2, // disallow string concatenation with __dirname and __filename (off by default) (on by default in the node environment)
        "no-process-exit": 1, // disallow process.exit() (on by default in the node environment)
        "no-restricted-modules": 0, // restrict usage of specified node modules (off by default)
        "no-sync": 0, // disallow use of synchronous methods (off by default)


        ////////// Stylistic Issues //////////

        "brace-style": [2, "stroustrup", {
            "allowSingleLine": true
        }], // enforce one true brace style (off by default)
        "camelcase": 0, // require camel case names
        "comma-spacing": [2, {
            "before": false,
            "after": true
        }], // enforce spacing before and after comma
        "comma-style": [2, "last"], // enforce one true comma style (off by default)
        "consistent-this": 0, // enforces consistent naming when capturing the current execution context (off by default)
        "eol-last": 2, // enforce newline at the end of file, with no multiple empty lines
        "func-names": 0, // require function expressions to have a name (off by default)
        "func-style": [2, "declaration"], // enforces use of function declarations or expressions (off by default)
        "key-spacing": [2, {
            "beforeColon": false,
            "afterColon": true
        }], // enforces spacing between keys and values in object literal properties
        "lines-around-comment": [2, {
            "beforeBlockComment": true,
            "afterBlockComment": false,
            "beforeLineComment": false,
            "afterLineComment": false
        }], // enforces empty lines around comments (off by default)
        "linebreak-style": 0, // disallow mixed 'LF' and 'CRLF' as linebreaks (off by default)
        "max-nested-callbacks": [2, 5], // specify the maximum depth callbacks can be nested (off by default)
        "new-cap": [2, {
            "capIsNewExceptions": ["Router"]
        }], // require a capital letter for constructors
        "new-parens": 2, // disallow the omission of parentheses when invoking a constructor with no arguments
        "newline-after-var": 0, // allow/disallow an empty newline after var statement (off by default)
        "no-array-constructor": 2, // disallow use of the Array constructor
        "no-continue": 0, // disallow use of the continue statement (off by default)
        "no-inline-comments": 0, // disallow comments inline after code (off by default)
        "no-lonely-if": 2, // disallow if as the only statement in an else block (off by default)
        "no-mixed-spaces-and-tabs": 2, // disallow mixed spaces and tabs for indentation
        "no-multiple-empty-lines": [2, {
            "max": 2
        }], // disallow multiple empty lines (off by default)
        "no-nested-ternary": 2, // disallow nested ternary expressions (off by default)
        "no-new-object": 2, // disallow use of the Object constructor
        "no-spaced-func": 2, // disallow space between function identifier and application
        "no-ternary": 0, // disallow the use of ternary operators (off by default)
        "no-trailing-spaces": 2, // disallow trailing whitespace at the end of lines
        "no-underscore-dangle": [1, { "allow": ["_conditions", "_id", "_update"] }], // disallow dangling underscores in identifiers
        "no-unneeded-ternary": 2, // disallow the use of Boolean literals in conditional expressions (off by default)
        "object-curly-spacing": [2, "always"], // require or disallow padding inside curly braces (off by default)
        "one-var": 0, // allow just one var statement per function (off by default)
        "operator-assignment": 0, // require assignment operator shorthand where possible or prohibit it entirely (off by default)
        "operator-linebreak": [2, "after"], // enforce operators to be placed before or after line breaks (off by default)
        "padded-blocks": 0, // enforce padding within blocks (off by default)
        "quote-props": [2, "as-needed"], // require quotes around object literal property names (off by default)
        "quotes": [2, "single"], // specify whether double or single quotes should be used
        "semi": [2, "always"], // require or disallow use of semicolons instead of ASI
        "semi-spacing": [2, {
            "before": false,
            "after": true
        }], // enforce spacing before and after semicolons
        "sort-vars": 0, // sort variables within the same declaration block (off by default)
        "keyword-spacing": [2, {
          "before": true,
          "after": true
        }], // enforce consistent spacing before and after keywords
        "space-before-blocks": [2, "always"], // require or disallow space before blocks (off by default)
        "space-before-function-paren": [2, {
            "anonymous": "always",
            "named": "never"
        }], // require or disallow space before function opening parenthesis (off by default)
        "space-in-parens": [2, "never"], // require or disallow spaces inside parentheses (off by default)
        "space-infix-ops": 0, // require spaces around operators
        "space-unary-ops": [2, {
            "words": true,
            "nonwords": false
        }], // Require or disallow spaces before/after unary operators (words on by default, nonwords off by default)
        "wrap-regex": 2, // require regex literals to be wrapped in parentheses (off by default)


        ////////// ECMAScript 6 //////////

        "generator-star-spacing": 0, // enforce the position of the * in generator functions (off by default)
        "no-var": 0, // require let or const instead of var (off by default)
        "object-shorthand": 0, // require method and property shorthand syntax for object literals (off by default)


        ////////// Legacy //////////

        "max-depth": 0, // specify the maximum depth that blocks can be nested (off by default)
        "max-len": 0, // specify the maximum length of a line in your program (off by default)
        "max-params": 0, // limits the number of parameters that can be used in the function declaration. (off by default)
        "max-statements": 0, // specify the maximum number of statement allowed in a function (off by default)
        "no-bitwise": 0, // disallow use of bitwise operators (off by default)
        "no-plusplus": 0 // disallow use of unary operators, ++ and -- (off by default)
    }
}
